function Result = visco(Geo, Mat, Set, Result)
    n_saves = fix(Set.time_incr/Set.save_freq);
    
    Result.x       = zeros(Geo.n_nodes,Geo.dim, n_saves);
    Result.u       = zeros(Geo.n_nodes,Geo.dim, n_saves);
    Result.stress  = zeros(Geo.n_nodes, Geo.vect_dim, n_saves);
    Result.F       = zeros(Geo.n_nodes,Geo.dim, n_saves);
    Result.t       = zeros(Geo.n_nodes,Geo.dim, n_saves);

    Result.times   = zeros(1, n_saves);
           
    K  = constK(Geo.X, Geo, Mat, Set);
    BB = intBB(Geo, Set);
    M = areaMassLI(Geo.X, Geo, Set);
 
    u      = zeros(Geo.n_nodes*Geo.dim, Set.time_incr); 
    F        = Geo.F;

    t = 0;
    for k = 1:(Set.time_incr-1)
        if size(Geo.u,3) == 1
            u_k_presc         = vec_nvec(Geo.u(:,:,1));
            u(Geo.fix,k)      = u_k_presc(Geo.fix);
            u(Geo.fix,k+1)    = u_k_presc(Geo.fix);
        end
%         if ismember(t, Geo.times)
%             index_t = find(Geo.times == t);
%             u_k_presc       = vec_nvec(Geo.u(:,:,index_t));
%             u(Geo.fix,k)    = u_k_presc(Geo.fix);
%         end
        
        if strcmpi(Mat.rheo, 'kelvin')
            [u(:,k+1), F] = eulerKV(u(:,k), u(:,k+1), F,...
                                                    K, BB, Geo, Set, Mat);
        elseif strcmpi(Mat.rheo, 'maxwell')
            [u(:,k+1), F] = eulerMX(u(:,k), u(:,k+1), F,...
                                                    K, BB, Geo, Set, Mat);
        elseif strcmpi(Mat.rheo, 'fmaxwell')
            [u(:,k+1), F] = eulerFMX(u, k, F, K, BB, Geo, Set, Mat);
        end
        
        % Save values
        if mod(k, Set.save_freq) == 0
            c = k/Set.save_freq;
            Result.times(c)      = t;
            Result.u(:,:,c)      = ref_nvec(u(:,k), Geo.n_nodes, Geo.dim);        
            Result.x(:,:,c)      = Geo.X + Result.u(:,:,c);
            x_kp1 = Geo.X+ref_nvec(u(:,k+1), Geo.n_nodes, Geo.dim);
            Result.stress(:,:,c) = calcStress(Result.x(:,:,c), x_kp1, Geo, Mat, Set);
            Result.F(:,:,c)      = F;
            Result.t(:,:,c)      = M \ Result.F(:,:,c);
            fprintf("it = %4i, |u| = %f, |stress| = %e \n", ...
                    k, norm(u(:,k)),  norm(Result.stress(:,:,c)));  
        end
        
        t = t + Set.dt;
    end
end